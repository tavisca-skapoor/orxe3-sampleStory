"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var addons_1 = __importDefault(require("@storybook/addons"));
var constants_1 = require("../constants");
var shared_1 = require("../shared");
var shared_2 = require("./shared");
exports.ThemeDecorator = {
    beforeDestroy: function () {
        var channel = addons_1.default.getChannel();
        channel.removeListener(constants_1.CHANGE, this.updateStore);
        this.unsubscribe();
    },
    computed: {
        theme: function () {
            return shared_1.getSelectedTheme(this.config.list, this.themeName);
        },
        themeClasses: function () {
            return shared_2.getHtmlClasses(this.theme);
        },
        themeName: function () {
            return this.storeTheme || shared_1.getSelectedThemeName(this.config.list);
        }
    },
    data: function () {
        return {
            storeTheme: this.store.get('theme')
        };
    },
    methods: {
        updateStore: function (theme) {
            this.store.set('theme', theme);
        }
    },
    mounted: function () {
        var _this = this;
        this.unsubscribe = this.store.subscribe(function (key, value) {
            if (key === 'theme') {
                _this.storeTheme = value;
            }
        });
        var channel = addons_1.default.getChannel();
        channel.on(constants_1.CHANGE, this.updateStore);
    },
    props: ['config', 'store'],
    template: "\n<component\n  v-if=\"this.config.Decorator\"\n  :is=\"this.config.Decorator\"\n  :theme=\"theme\"\n  :themes=\"this.config.list\"\n  :themeClasses=\"themeClasses\"\n  :themeName=\"themeName\"\n>\n  <slot></slot>\n</component>\n<div v-else :class=\"themeClasses\">\n  <slot></slot>\n</div>",
    updated: function () {
        var channel = addons_1.default.getChannel();
        channel.emit(constants_1.THEME, this.themeName);
    }
};
