var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, customElement, LitElement, property } from 'lit-element';
import flatpickr from '@bit/orxe_3.base.orxe-flatpickr/flatpickr';
import datepickerCss from './datepicker-css';
import rangePlugin from '@bit/orxe_3.base.orxe-flatpickr/plugins/rangePlugin';
import { uniqueID } from '@bit/orxe_3.base.utils';
import '@bit/orxe_3.base.input-container';
const SINGLE = 'single';
const RANGE = 'range';
let OrxeDatePicker = class OrxeDatePicker extends LitElement {
    constructor() {
        super(...arguments);
        this.calender = {};
        this.calenderId = uniqueID();
        this.datepickerInput = `datepicker-${uniqueID()}`;
        this.datepickerRangeInput = `datepicker-range-${uniqueID()}`;
        this.backArrowId = uniqueID();
        this.calenderPanelId = uniqueID();
        this.mode = 'single';
        this.disableMobile = true;
        this.allowInput = false;
        this.defaultDate = '';
        this.dateFormat = 'm-d-Y';
        this.enable = [];
        this.disable = [];
        this.inline = false;
        this.minDate = '';
        this.maxDate = '';
        this.clickOpens = true;
        this.nextArrow = ' <svg focusable="false" preserveAspectRatio="xMidYMid meet" style="will-change: transform;" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" aria-hidden="true"> <path d="M11 8l-5 5-.7-.7L9.6 8 5.3 3.7 6 3z"></path> </svg>';
        this.prevArrow = ' <svg focusable="false" preserveAspectRatio="xMidYMid meet" style="will-change: transform;" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" aria-hidden="true" > <path d="M5 8l5-5 .7.7L6.4 8l4.3 4.3-.7.7z"></path> </svg>';
        this.ariaDateFormat = 'F j, Y';
        this.position = 'auto';
        this.weekNumbers = false;
    }
    firstUpdated() {
        let self = this;
        const CALENDERPANEL = document.getElementById(this.calenderPanelId);
        const inputDate = document.getElementById(this.calenderId);
        const backArrow = document.getElementById(this.backArrowId);
        inputDate.onclick = () => {
            setTimeout(() => {
                this.calender.open();
            }, 0);
            inputDate.disabled = true;
            CALENDERPANEL.style.display = 'block';
        };
        backArrow.onclick = () => {
            this.calender.close();
            CALENDERPANEL.style.display = 'none';
        };
        const mode = this.mode;
        this.calender = flatpickr(`#${this.datepickerInput}`, {
            showMonths: 2,
            defaultDate: this.defaultDate,
            allowInput: this.allowInput,
            mode: this.mode,
            dateFormat: this.dateFormat,
            disableMobile: this.disableMobile,
            maxDate: this.maxDate,
            minDate: this.minDate,
            inline: this.inline,
            enable: this.enable,
            nextArrow: this.nextArrow,
            prevArrow: this.prevArrow,
            clickOpens: this.clickOpens,
            ariaDateFormat: this.ariaDateFormat,
            disable: this.disable,
            position: this.position,
            weekNumbers: this.weekNumbers,
            plugins: mode === RANGE ? [rangePlugin({ input: `#${this.datepickerRangeInput}` })] : [],
            onChange(selectedDates, selectedDate, instance) {
                if (mode === SINGLE && selectedDates.length === 1) {
                    const getSelectedDates = new CustomEvent('onChange', {
                        detail: { selectedDates, selectedDate, instance },
                        bubbles: true,
                        composed: true,
                    });
                    const activeDate = self.calender.formatDate(selectedDates[0], 'm-d-Y');
                    if (this.mode == 'single') {
                        inputDate.setAttribute('value', activeDate);
                    }
                    document.dispatchEvent(getSelectedDates);
                }
                else if (mode === RANGE && selectedDates.length === 2) {
                    const getSelectedDates = new CustomEvent('onChange', {
                        detail: { selectedDates },
                        bubbles: true,
                        composed: true,
                    });
                    document.dispatchEvent(getSelectedDates);
                }
            },
            onOpen(selectedDates, selectedDate, instance) {
                const openEvent = new CustomEvent('onOpen', {
                    detail: { selectedDates, selectedDate, instance },
                    bubbles: true,
                    composed: true,
                });
                document.dispatchEvent(openEvent);
            },
            onClose(selectedDates, selectedDate, instance) {
                inputDate.disabled = false;
                const closeEvent = new CustomEvent('onClose', {
                    detail: { selectedDates, selectedDate, instance },
                    bubbles: true,
                    composed: true,
                });
                CALENDERPANEL.style.display = 'none';
                document.dispatchEvent(closeEvent);
            },
            onMonthChange(selectedDates, selectedDate, instance) {
                const monthChangeEvent = new CustomEvent('onMonthChange', {
                    detail: { selectedDates, selectedDate, instance },
                    bubbles: true,
                    composed: true,
                });
                document.dispatchEvent(monthChangeEvent);
            },
            onYearChange(selectedDates, selectedDate, instance) {
                const yearChangeEvent = new CustomEvent('onYearChange', {
                    detail: { selectedDates, selectedDate, instance },
                    bubbles: true,
                    composed: true,
                });
                document.dispatchEvent(yearChangeEvent);
            },
            onReady(selectedDates, selectedDate, instance) {
                const readyEvent = new CustomEvent('onReady', {
                    detail: { selectedDates, selectedDate, instance },
                    bubbles: true,
                    composed: true,
                });
                document.dispatchEvent(readyEvent);
            },
            onValueUpdate(selectedDates, selectedDate, instance) {
                const valueChangeEvent = new CustomEvent('onValueUpdate', {
                    detail: { selectedDates, selectedDate, instance },
                    bubbles: true,
                    composed: true,
                });
                document.dispatchEvent(valueChangeEvent);
            },
            onDayCreate(selectedDates, selectedDate, instance) {
                const dayCreateEvent = new CustomEvent('onDayCreate', {
                    detail: { selectedDates, selectedDate, instance },
                    bubbles: true,
                    composed: true,
                });
                document.dispatchEvent(dayCreateEvent);
            },
        });
    }
    _renderDatePicker() {
        if (this.mode === RANGE) {
            return this._rangeDatepickerHtml();
        }
        return this._singleDatepickerHtml();
    }
    _rangeDatepickerHtml() {
        return html `
      <div class="datepicker-field-container">
        <orxe-input-container label-value="Select Start Date">
          <input type="text" id=${this.datepickerInput} />
        </orxe-input-container>
      </div>
      <div class="datepicker-field-container">
        <orxe-input-container label-value="Select End Date">
          <input type="text" id=${this.datepickerRangeInput} />
        </orxe-input-container>
        <div></div>
      </div>
    `;
    }
    _singleDatepickerHtml() {
        return html `
  	<orxe-input-container label-value="Select Date">
  	<input id=${this.calenderId} value=${this.defaultDate}></input>
  	</orxe-input-container>
    <div id=${this.calenderPanelId} class="calender-container">
      <div class="calender-container__content">
      <span class="back-arrow" id=${this.backArrowId}>&#8592;</span>
        <div class="datepicker-field-container">
  			<orxe-input-container label-value="Select Date">
  			<input type='text' id=${this.datepickerInput}>
  			</orxe-input-container>
        </div>
      </div>

    </div>
     `;
    }
    render() {
        return html `
      <style>
        ${datepickerCss}
      </style>
      <div class="datepicker-main-container">
        ${this._renderDatePicker()}
      </div>
    `;
    }
    createRenderRoot() {
        return this;
    }
};
__decorate([
    property({ type: 'single' || 'range' })
], OrxeDatePicker.prototype, "mode", void 0);
__decorate([
    property({ type: Boolean })
], OrxeDatePicker.prototype, "disableMobile", void 0);
__decorate([
    property({ type: Boolean })
], OrxeDatePicker.prototype, "allowInput", void 0);
__decorate([
    property({ type: Date })
], OrxeDatePicker.prototype, "defaultDate", void 0);
__decorate([
    property({ type: String })
], OrxeDatePicker.prototype, "dateFormat", void 0);
__decorate([
    property({ type: Array })
], OrxeDatePicker.prototype, "enable", void 0);
__decorate([
    property({ type: Array })
], OrxeDatePicker.prototype, "disable", void 0);
__decorate([
    property({ type: Boolean })
], OrxeDatePicker.prototype, "inline", void 0);
__decorate([
    property({ type: String || Date })
], OrxeDatePicker.prototype, "minDate", void 0);
__decorate([
    property({ type: String || Date })
], OrxeDatePicker.prototype, "maxDate", void 0);
__decorate([
    property({ type: Boolean })
], OrxeDatePicker.prototype, "clickOpens", void 0);
__decorate([
    property({ type: String })
], OrxeDatePicker.prototype, "nextArrow", void 0);
__decorate([
    property({ type: String })
], OrxeDatePicker.prototype, "prevArrow", void 0);
__decorate([
    property({ type: String })
], OrxeDatePicker.prototype, "ariaDateFormat", void 0);
__decorate([
    property({ type: 'auto' || 'above' || 'below' })
], OrxeDatePicker.prototype, "position", void 0);
__decorate([
    property({ type: Boolean })
], OrxeDatePicker.prototype, "weekNumbers", void 0);
OrxeDatePicker = __decorate([
    customElement('orxe-datepicker')
], OrxeDatePicker);
export default OrxeDatePicker;
