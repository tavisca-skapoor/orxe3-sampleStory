export default function SelectableBehaviour(Base) {
    const keys = {
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        delete: 46,
        enter: 13,
        space: 32,
    };
    return class extends Base {
        constructor(...args) {
            super(args);
            this.selected = 0;
        }
        set activated(selectedIndex) {
            this.activatedElem = this.selectableItems.find((el) => el.index === selectedIndex);
        }
        get activated() {
            return this.activatedElem;
        }
        get selectableItemLength() {
            return [...this.children].filter((el) => !el.disabled).length;
        }
        get selectableItems() {
            return [...this.children].map((el, index) => {
                el.index = index;
                return el;
            })
                .filter((el) => !el.disabled);
        }
        get focusedIndex() {
            return this.selectableItems.findIndex((element) => element.hasAttribute('focused'));
        }
        selectActiveElement() {
            this.activated = this.selected;
            this.activated.setAttribute('aria-selected', 'true');
            this.activated['active'] = true;
            this._removeFocusFromAllItems();
            this.activated.setAttribute('focused', '');
        }
        selectedChanged(index) {
            this.activated.setAttribute('aria-selected', 'false');
            this.activated['active'] = false;
            this.selected = index;
            this.selectActiveElement();
        }
        _removeFocusFromAllItems() {
            this.selectableItems.forEach((element) => {
                element.removeAttribute('focused');
            });
        }
        addEvents() {
            this.onBlur();
            this.onFocus();
            this.selectableItems.forEach((element) => {
                if (element) {
                    this.onClick(element);
                    this.onKeyDown(element);
                }
            });
        }
        onClick(element) {
            element.addEventListener('click', (event) => this._handleOnTapEvent(event));
        }
        _handleOnTapEvent(event) {
            const selectionChangedEvent = new CustomEvent('onTap', {
                detail: {
                    index: event.currentTarget.index,
                    id: event.currentTarget.id,
                },
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(selectionChangedEvent);
            this.selectedChanged(event.currentTarget.index);
        }
        onKeyDown(element) {
            element.addEventListener('keydown', (event) => {
                if (event.keyCode === keys.enter) {
                    this._handleEnterEvent();
                }
                this._handleArrowKeysEvent(event.keyCode, event);
            });
        }
        _handleEnterEvent() {
            const selectedIndex = this.selectableItems[this.focusedIndex].index;
            const selectionChangedEvent = new CustomEvent('onEnter', {
                detail: {
                    index: selectedIndex,
                    id: this.selectableItems[this.focusedIndex].id,
                },
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(selectionChangedEvent);
            this.selectedChanged(selectedIndex);
        }
        _handleArrowKeysEvent(key, e) {
            if (this.orientation === 'horizontal') {
                if (key === keys.left) {
                    this.selectItem(this.focusedIndex, e, false);
                }
                else if (key === keys.right) {
                    this.selectItem(this.focusedIndex, e, true);
                }
            }
            else {
                if (key === keys.up) {
                    this.selectItem(this.focusedIndex, e, false);
                }
                else if (key === keys.down) {
                    this.selectItem(this.focusedIndex, e, true);
                }
            }
        }
        selectItem(index, e, nextItem) {
            const i = this._checkForActionIndex(index, nextItem);
            this._removeFocusFromAllItems();
            this.selectableItems[i].setAttribute('focused', '');
            if (i === this.selectableItemLength - 1 || i === 0) {
                e.preventDefault();
            }
            this.selectableItems[i].scrollIntoView();
        }
        _checkForActionIndex(index, nextItem) {
            if (nextItem) {
                return (index + 1) % this.selectableItemLength;
            }
            else {
                return (index - 1 + this.selectableItemLength) % this.selectableItemLength;
            }
        }
        onBlur() {
            this.addEventListener('blur', (event) => {
                const currentTarget = event.currentTarget;
                const focusedIndex = this.selectableItems[currentTarget.focusedIndex].index;
                if (currentTarget.activated.index !== focusedIndex) {
                    currentTarget.querySelector('[focused]').removeAttribute('focused');
                }
                const blurEvent = new CustomEvent('onTabBlur', {
                    detail: {
                        id: currentTarget.id
                    },
                    bubbles: true,
                    composed: true,
                });
                this.dispatchEvent(blurEvent);
            }, true);
        }
        onFocus() {
            this.addEventListener('focus', (event) => {
                const currentTarget = event.currentTarget;
                currentTarget.querySelector('[active]').setAttribute('focused', '');
                const focusEvent = new CustomEvent('onTabFocus', {
                    detail: {
                        id: currentTarget.id
                    },
                    bubbles: true,
                    composed: true,
                });
                this.dispatchEvent(focusEvent);
            }, true);
        }
    };
}
