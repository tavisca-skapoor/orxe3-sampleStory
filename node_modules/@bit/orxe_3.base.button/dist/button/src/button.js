var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, customElement, property, LitElement } from 'lit-element';
import orxeButtonScss from './button-css';
import { uniqueID, initRipple, camelToCssClassName } from '@bit/orxe_3.base.utils';
import { nothing } from 'lit-html';
const buttonId = uniqueID();
const ICON_ONLY = 'iconOnly';
const ICON_AND_TEXT = 'iconAndText';
let OrxeButton = class OrxeButton extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.kind = 'primary';
        this.href = '';
        this.rel = '';
        this.autofocus = false;
        this.target = '_self';
        this.type = '';
        this.size = 'small';
    }
    _handleClick(event) {
        if (!this.disabled) {
            initRipple(event);
        }
        else {
            event.preventDefault();
            event.stopPropagation();
        }
        const clickEvent = new CustomEvent('onClick', { bubbles: true, composed: true });
        this.dispatchEvent(clickEvent);
    }
    onFocus() {
        const clickEvent = new CustomEvent('onFocus', { bubbles: true, composed: true });
        this.dispatchEvent(clickEvent);
    }
    onBlur() {
        const clickEvent = new CustomEvent('onBlur', { bubbles: true, composed: true });
        this.dispatchEvent(clickEvent);
    }
    render() {
        const { autofocus, disabled, href, rel, target, type } = this;
        const kind = camelToCssClassName(this.kind);
        const btnSize = this.kind == ICON_ONLY || this.kind == ICON_AND_TEXT ? '' : 'orxe-btn--' + this.size;
        const icon = html `
      <svg
        focusable="false"
        preserveAspectRatio="xMidYMid meet"
        style="will-change: transform;"
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 20 20"
        aria-hidden="true"
      >
        <path
          d="M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,
    1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z"
        ></path>
        <path
          fill="none"
          d="M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z"
          data-icon-path="inner-path"
          opacity="0"
        ></path>
      </svg>
    `;
        return href || this.kind == ICON_AND_TEXT
            ? html `
          <a
            id=${buttonId}
            role="button"
            class=" ${this.kind == ICON_AND_TEXT ? kind : 'orxe-link orxe-link--' + this.size} "
            ?href="${href}"
            ?rel="${rel}"
            ?target="${target}"
            ?type="${type}"
            @click="${this._handleClick}}"
          >
          ${this.kind === ICON_AND_TEXT ? icon : nothing} 
          <slot  />
          </a>
        `
            : html `
          <button
            id=${buttonId}
            @click="${this._handleClick}"
            @focus="${this.onFocus}"
            @blur="${this.onBlur}"
            type=${type}
            class="orxe-button ${kind + ' ' + btnSize}"
            ?autofocus="${autofocus}"
            ?disabled="${disabled}"
          >
            ${this.kind !== ICON_ONLY
                ? html `
                  <slot></slot>
                `
                : icon}
          </button>
        `;
    }
};
OrxeButton.styles = orxeButtonScss;
__decorate([
    property()
], OrxeButton.prototype, "disabled", void 0);
__decorate([
    property()
], OrxeButton.prototype, "kind", void 0);
__decorate([
    property()
], OrxeButton.prototype, "href", void 0);
__decorate([
    property()
], OrxeButton.prototype, "rel", void 0);
__decorate([
    property()
], OrxeButton.prototype, "autofocus", void 0);
__decorate([
    property()
], OrxeButton.prototype, "target", void 0);
__decorate([
    property()
], OrxeButton.prototype, "type", void 0);
__decorate([
    property()
], OrxeButton.prototype, "size", void 0);
OrxeButton = __decorate([
    customElement('orxe-button')
], OrxeButton);
export default OrxeButton;
